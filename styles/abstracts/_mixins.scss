@use "breakPoints" as *;

$compare: (
	max: max-width,
	min: min-width
);
@mixin mq($key, $compare: min) {
	$size: map-get($breakpoints, $key);
	@if $compare == max {
		@media (max-width: $size) {
			@content;
		}
	} @else {
		@media (min-width: $size) {
			@content;
		}
	}
}

@mixin triangle(
	$color: black,
	$width: 200px,
	$height: 200px,
	$direction: bottom right
) {
	width: #{$width};
	height: #{$height};
	background: linear-gradient(
		to #{$direction},
		#0000 0%,
		#0000 50%,
		#{$color} 50%,
		#{$color} 100%
	);
}

@mixin circle($color: black, $width: 200px, $height: null) {
	width: $width;
	height: if($height == null, $width, $height);
	background-color: $color;
	border-radius: 50%;
}

@mixin hide-scrollbars {
	-ms-overflow-style: none; // IE, Edge
	scrollbar-width: none; // Firefox
	::-webkit-scrollbar {
		display: none;
	} // Chrome, Safari, Opera
}

// Mixin for shorter box-sizing
@mixin box($width, $height: $width) {
	width: $width;
	height: $height;
}

// Mixin for pseudo elements

@mixin pseudo(
	$loc: before,
	$content: "",
	$pos: absolute,
	$top: 0,
	$bottom: 0,
	$left: 0,
	$right: 0
) {
	position: relative;

	&::#{$loc} {
		content: $content;
		position: $pos;
		top: $top;
		bottom: $bottom;
		left: $left;
		right: $right;
		@content;
	}
}

@mixin hover-lift() {
	transition: transform 350ms ease-in-out;
	box-shadow: 0 0.25em 0.5em 0 rgba(black, 0.2);

	@include pseudo($loc: before) {
		box-shadow: 0 0 1.25em 0 rgba(black, 0.4);
		transition: transform 350ms ease-in-out;
		opacity: 0;
	}

	&:hover,
	&:focus {
		transform: scale(1.05);

		&::before {
			opacity: 1;
		}
	}
}

// Mixins for different flex use cases
@mixin flex-column {
	display: flex;
	flex-direction: column;
}

@mixin flex-center {
	display: flex;
	align-items: center;
	justify-content: center;
}

@mixin flex-center-column {
	@include flex-center;
	flex-direction: column;
}

@mixin flex-center-vert {
	display: flex;
	align-items: center;
}

@mixin flex-center-horiz {
	display: flex;
	justify-content: center;
}

// Mixin for creating reusable a box-radius
@mixin radius($radius) {
	border-radius: $radius * 1px;
}

// Mixin for paddings
@mixin padding($top, $right, $bottom, $left) {
	padding-top: $top * 1px;
	padding-right: $right * 1px;
	padding-bottom: $bottom * 1px;
	padding-left: $left * 1px;
}

// Mixin for margins
@mixin margin($top, $right, $bottom, $left) {
	margin-top: $top * 1px;
	margin-right: $right * 1px;
	margin-bottom: $bottom * 1px;
	margin-left: $left * 1px;
}

// Mixin for creating a gradient-background
@mixin background-gradient($start-color, $end-color, $orientation) {
	background: $start-color;

	@if $orientation == "vertical" {
		background: -webkit-linear-gradient(top, $start-color, $end-color);
		background: linear-gradient(to bottom, $start-color, $end-color);
	} @else if $orientation == "horizontal" {
		background: -webkit-linear-gradient(left, $start-color, $end-color);
		background: linear-gradient(to right, $start-color, $end-color);
	} @else {
		background: -webkit-radial-gradient(
			center,
			ellipse cover,
			$start-color,
			$end-color
		);
		background: radial-gradient(
			ellipse at center,
			$start-color,
			$end-color
		);
	}
}
